/*
	WebUSB FTDI Driver v0.01a
	(C) 2020 Shaped Technologies (Jai B.)

	GPL v2 free for personal use / commercial or closed source use requires commercial license - contact us.
*/
// Custom minified version. Source: https://github.com/pmp-p/webusb-ftdi/blob/master/webusb-ftdi.js
export class WebUSBSerialPort{#_=0;#e=1;#T=2;#t=3;#i=4;#I=5;#S=6;#E=7;#s=9;#r=10;#n=11;#D=12;#F=144;#O=0;#R=1;#o=2;#a=4;#c=8;#h=16;#d=32;#A=64;#u=1;#v=2;#l=3;#M=4;#B=0;#f=1;#U=2;#C=3;#b=this.#_;#p="vendor";#L=0;#N=1;#P=2;#y=3;#g={SIO:1,FT8U232AM:2,FT232BM:3,FT2232C:4,FT232RL:5,FT2232H:6,FT4232H:7,FT232H:8,FTX:9};#m={ftdi_sio_b300:0,ftdi_sio_b600:1,ftdi_sio_b1200:2,ftdi_sio_b2400:3,ftdi_sio_b4800:4,ftdi_sio_b9600:5,ftdi_sio_b19200:6,ftdi_sio_b38400:7,ftdi_sio_b57600:8,ftdi_sio_b115200:9};#Q=this.#i;#H=0;#Y=256;#w=512;#G=768;#K=1024;#q=0;#W=2048;#X=4096;#V=16384;#x=this.#e;#k=1;#j=this.#k<<8|1;#z=this.#k<<8|0;#J=2;#Z=this.#J<<8|2;#$=this.#J<<8|0;#__=this.#T;#e_=0;#T_=256;#t_=512;#i_=1024;#I_=this.#r;#S_=this.#s;#E_=this.#S;#s_=this.#I;#r_=16;#n_=32;#D_=64;#F_=128;#O_=this.#n;#R_=0;#o_=32;#a_=this.#D;#c_=this.#F;#h_=8;#d_=10;#A_=16;#u_=32;#v_=64;#l_=128;#M_=1;#B_=2;#f_=4;#U_=8;#C_=16;#b_=32;#p_=64;#L_=128;constructor(_,e){this.device=_,this.portConfiguration=e,this.interfaceNumber=0,this.endpointIn=0,this.endpointOut=0,this.modemStatusByte=0,this.lineStatusByte=0,this.packetsReceived=0}connect(_,e){this.onReceive=_,this.onReceiveError=e;let T=()=>{this.device.transferIn(this.endpointIn,64).then((_=>{let e=new Uint8Array(_.data.buffer);if(e[0]!=this.modemStatusByte&&(this.modemStatusByte=e[0]),e[1]!=this.lineStatusByte&&(this.lineStatusByte=e[1]),e.length>2){let _=new Uint8Array(e.length-2);for(let T=2;T<e.length;T++)_[T-2]=e[T];this.onReceive(_)}else this.packetsReceived=this.packetsReceived+1;T()}),(_=>{this.onReceiveError(_)}))};return this.device.open().then((()=>{if(null===this.device.configuration)return this.device.selectConfiguration(1)})).then((()=>{this.device.configuration.interfaces.forEach((_=>{_.alternates.forEach((e=>{console.log(e),255==e.interfaceClass&&(this.interfaceNumber=_.interfaceNumber,e.endpoints.forEach((_=>{"out"==_.direction&&(this.endpointOut=_.endpointNumber),"in"==_.direction&&(this.endpointIn=_.endpointNumber)})))}))}))})).then((()=>this.device.claimInterface(this.interfaceNumber))).then((()=>this.device.selectAlternateInterface(this.interfaceNumber,0))).then((()=>{let _=this.portConfiguration.baudrate;this.device.controlTransferOut({requestType:"vendor",recipient:"device",request:this.#t,value:this.getBaudDivisor(_),index:this.getBaudBase()})})).then((()=>this.device.controlTransferIn({requestType:"vendor",recipient:"device",request:this.#I_,value:0,index:0},1))).then((_=>{if(this.device.latencyTimer=new Uint8Array(_.data.buffer)[0],1!=this.device.latencyTimer)return this.device.controlTransferOut({requestType:"vendor",recipient:"device",request:this.#S_,value:1,index:0})})).then((_=>this.device.latencyTimer=this.device.controlTransferIn({requestType:"vendor",recipient:"device",request:this.#I_,value:0,index:0},1))).then((_=>(this.device.latencyTimer=new Uint8Array(_.data.buffer)[0],console.log("Current Latency Timer: "),console.log(this.device.latencyTimer),T(),this.device)))}DIV_ROUND_CLOSEST(_,e){return _-1>0||e-1>0||_>0==e>0?(_+e/2)/e:(_-e/2)/e}getBaudBase(){return 48e6}getBaudDivisor(_){let e=this.getBaudBase(),T=new Uint8Array(8);T=[0,3,2,4,1,5,6,7];let t=0,i=this.DIV_ROUND_CLOSEST(e,2*_);return t=i>>3,t|=T[7&i]<<14,1==t?t=0:16385==t&&(t=1),t}send(_){return this.device.transferOut(this.endpointOut,_)}disconnect(){this.device.close()}}class WebUSBSerialDevice{constructor(_){if(!("usb"in navigator))throw new Error("USB Support not available!");this.configuration=_||{overridePortSettings:!1,baudrate:9600,bits:8,stop:1,parity:!1,deviceFilters:[]},this.devices=[]}async getAvailablePorts(){return this.devices=await navigator.usb.getDevices(),this.devices.map((_=>new WebUSBSerialPort(_)))}async requestNewPort(){try{let _=await navigator.usb.requestDevice({filters:this.configuration.deviceFilters});return _ in this.devices||this.devices.push(_),new WebUSBSerialPort(_,this.configuration)}catch(_){throw new Error(_)}}}
