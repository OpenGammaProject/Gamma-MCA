export default class Matrix{backwardSubstitution(t,r,n,e){if(n<0||e<0)return r;{const o=t.length,l=t[0].length-1;let i=0,s=0;for(let u=l-1;u>=e;u--)u===e?i=t[n][l]/t[n][u]:(t[n][l]-=t[n][u]*r[o-1-s],s++);return r[n]=i,this.backwardSubstitution(t,r,n-1,e-1)}}combineMatrices(t,r){const n=r.length,e=t[0].length,o=[];for(let l=0;l<n;l++){o.push([]);for(let n=0;n<=e;n++)o[l][n]=n===e?r[l]:t[l][n]}return o}forwardElimination(t){const r=t.length,n=t[0].length,e=[];for(let o=0;o<r;o++){e.push([]);for(let r=0;r<n;r++)e[o][r]=t[o][r]}for(let t=0;t<r-1;t++)for(let o=t;o<r-1;o++){const r=e[o+1][t]/e[t][t];for(let l=0;l<n;l++)e[o+1][l]=e[o+1][l]-r*e[t][l]}return e}gaussianJordanElimination(t,r){const n=this.combineMatrices(t,r),e=this.forwardElimination(n);return this.backwardSubstitution(e,[],e.length-1,e[0].length-2)}identityMatrix(t){const r=t.length,n=t[0].length,e=[[]];for(let t=0;t<r;t++)for(let r=0;r<n;r++)e[t][r]=r===t?1:0;return e}matrixProduct(t,r){const n=t[0].length,e=r.length;if(n!==e)return!1;const o=[[]];for(let l=0;l<e;l++)for(let e=0;e<n;e++)o[l][e]=this.doMultiplication(t,r,l,e,n);return o}doMultiplication(t,r,n,e,o){let l=0,i=0;for(;l<o;)i+=t[n][l]*r[l][e],l++;return i}multiplyRow(t,r,n){const e=t.length,o=t[0].length,l=[[]];for(let i=0;i<e;i++)for(let e=0;e<o;e++)l[i][e]=i===r?t[i][e]*n:t[i][e];return l}}