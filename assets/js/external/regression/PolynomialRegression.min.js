import Matrix from"./Matrix.min.js";import DataPoint from"./DataPoint.min.js";export default class PolynomialRegression{static read(t,e){const i=t.map((t=>new DataPoint(t.x,t.y)));return new PolynomialRegression(i,e)}constructor(t,e){this.data=t,this.degree=e,this.matrix=new Matrix,this.leftMatrix=[],this.rightMatrix=[],this.generateLeftMatrix(),this.generateRightMatrix()}sumX(t,e){let i=0;for(let r=0;r<t.length;r++)i+=Math.pow(t[r].x,e);return i}sumXTimesY(t,e){let i=0;for(let r=0;r<t.length;r++)i+=Math.pow(t[r].x,e)*t[r].y;return i}sumY(t,e){let i=0;for(let r=0;r<t.length;r++)i+=Math.pow(t[r].y,e);return i}generateLeftMatrix(){for(let t=0;t<=this.degree;t++){this.leftMatrix.push([]);for(let e=0;e<=this.degree;e++)this.leftMatrix[t][e]=0===t&&0===e?this.data.length:this.sumX(this.data,t+e)}}generateRightMatrix(){for(let t=0;t<=this.degree;t++)this.rightMatrix[t]=0===t?this.sumY(this.data,1):this.sumXTimesY(this.data,t)}getTerms(){return this.matrix.gaussianJordanElimination(this.leftMatrix,this.rightMatrix)}predictY(t,e){let i=0;for(let r=t.length-1;r>=0;r--)i+=0===r?t[r]:t[r]*Math.pow(e,r);return i}}